* General

IN REACT: a function is always different from itself!
(that's because it's going to be "redefined", i.e, the code will re-run thus creating another "pointer")

* useEffect

Always run once at `component-mount`

args:
1. function
2. dependency args (vector)

returns:
return (optionally) a function to be run in component `will-unmount`

* useMemo

https://www.youtube.com/watch?v=vpE9I_eqHdM&list=PLApy4UwQM3UrZsBTY111R6P4frt6WK-G2&index=3

memoizes a value

has a deps array as well so it can re-run to update the value

const selectedValue = useMemo(
    () => items.find(...),
    [items]);

`memo` (not `useMemo`) can wrap a component! (in which case it's going to re-render only if the component's props change)

export bla return memo(Component);

* useCallback

https://www.youtube.com/watch?v=MxIPQZ64x0I&t=55s

useCallback will "freeze" a function so that it behaves as "data": same content, same function.
this solves the problem when a component is wrapped in `memo`
